import scapy.all as scapy

pkt_size = int($SN_PKT_SIZE!'60')
num_ports = int($SN_PORTS!'1')
num_cores = int($SN_CORES!'1')

assert(60 <= pkt_size <= 1522)
assert(1 <= num_ports <= 16)
assert(1 <= num_cores <= 4)

# generate flows by varying UDP dst port
num_flows = int($SN_FLOWS!'1')
assert(1 <= num_flows <= 10000)

eth = scapy.Ether(src='02:1e:67:9f:4d:ae', dst='06:16:3e:1b:72:32')
ip = scapy.IP(src='192.168.0.1', dst='10.0.0.1')
udp = scapy.UDP(sport=10001, dport=10002)
payload = ('hello' + '0123456789' * 200)[:pkt_size-len(eth/ip/udp)]

pkt = eth/ip/udp/payload
print 'Packet template:'
pkt.show()
pkt_bytes = bytearray(str(pkt))
assert(len(pkt_bytes) == pkt_size)

ports = [PMDPort(port_id=i, num_inc_q=num_cores, num_out_q=num_cores) \
         for i in range(num_ports)]

for i in range(num_cores):
    bess.add_worker(wid=i, core=i)

    src = Source()
    bess.attach_task(src.name, 0, wid=i)

    rr = RoundRobin(gates=num_ports)

    src \
    -> Rewrite(templates=[pkt_bytes]) \
    -> RandomUpdate(fields=[{'offset': 36, 'size': 2, 'min': 10002, 'max': 10002 + num_flows - 1}]) \
    -> rr

    for j in range(num_ports):
        rr:j->QueueOut(port=ports[j], qid=i)
        QueueInc(port=ports[j], qid=i) -> Sink()
