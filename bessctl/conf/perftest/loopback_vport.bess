import time
import multiprocessing

num_cpus = multiprocessing.cpu_count()

CORE_START = int($BESS_CORE_START!'1')
CORE_END = int($BESS_CORE_END!num_cpus)   # not inclusive
CORE_STEP = int($BESS_CORE_STEP!'1')      # for SMT servers
INTERVAL = int($BESS_INTERVAL!'2')

cpu_set = []
ports = []

def measure():
    assert len(cpu_set) == len(ports)

    old_stats = []
    new_stats = []

    for port in ports:
        old_stats.append(bess.get_port_stats(port.name))

    time.sleep(INTERVAL)

    for port in ports:
        new_stats.append(bess.get_port_stats(port.name))

    out_mpps = []
    inc_mpps = []

    for i in range(len(ports)):
        time_diff = new_stats[i].timestamp - old_stats[i].timestamp

        pkts_diff = new_stats[i].out.packets - \
                    old_stats[i].out.packets
        out_mpps.append(pkts_diff / time_diff / 1000000.0)

        pkts_diff = new_stats[i].inc.packets - \
                    old_stats[i].inc.packets
        inc_mpps.append(pkts_diff / time_diff / 1000000.0)

    print '%-15s' % 'CPU',
    print '%7s' % '',
    for i in range(len(ports)):
        print '%7d' % cpu_set[i],
    print

    print '%-15s' % 'Ports',
    print '%7s' % '(total)',
    for i in range(len(ports)):
        print '%7s' % ports[i].name,
    print

    print '-' * (8 * (len(ports) + 3))

    print '%-15s' % 'Outgoing (Mpps)',
    print '%7.3f' % sum(out_mpps),
    for i in range(len(ports)):
        print '%7.3f' % out_mpps[i],
    print

    print '%-15s' % 'Incoming (Mpps)',
    print '%7.3f' % sum(inc_mpps),
    for i in range(len(ports)):
        print '%7.3f' % inc_mpps[i],
    print
    print

for cpu in range(CORE_START, CORE_END, CORE_STEP):
    v = VPort(loopback=1, rxq_cpus=[cpu])

    cpu_set.append(cpu)
    ports.append(v)

    Source() -> PortOut(port=v)
    PortInc(port=v) -> Sink()

    bess.resume_all()
    measure()
    bess.pause_all()
