import socket

def aton(ip):
    return bytearray(socket.inet_aton(ip))

### NOTE USING TOS field to hold in_port
### n=101 is magic number for LOCAL


## MERGE TABLES FOR WIRING
to_tbl_1::Merge()
to_tbl_2::Merge()
to_tbl_3::Merge()
to_tbl_4::Merge()
to_tbl_5::Merge()
to_tbl_6::Merge()

to_tbl_grp::Merge()

to_out_1::Merge()
to_out_2::Merge()
to_out_3::Merge()
to_out_4::Merge()

to_lcl::Merge()
to_ctl::Merge()



#### TABLE 0 ####
### Create the modules
t0_qq::BPF()
t0_inport::ExactMatch(fields=[{'offset':15, 'size':1}],
                      size=4096)
t0_p2::BPF()
t0_lcl::BPF()
t0_default::BPF()


### Hook up the modules
t0_qq:1      -> to_tbl_6
t0_qq:0      -> t0_inport

t0_inport:1  -> t0_p2
t0_inport:2  -> t0_lcl
t0_inport:0  -> t0_default

t0_p2:1      -> to_lcl
t0_p2:0      -> t0_default

t0_lcl:1     -> to_out_2
t0_lcl:0     -> t0_default

t0_default:1 -> to_ctl
t0_default:0 -> to_tbl_1


### Set module state
## t0_qq
#table=0 priority=55000 vlan_tci=0x1000/0x1000 actions=goto_table:6
t0_qq.add([{'priority' : 55000,
            'filter'   : 'vlan and vlan',
            'gate'     : 1 }])
# otherwise go to inport table

## t0_inport
# port 2 to t0_p2
t0_inport.add(fields=[bytearray(chr(2))], gate=1)
# LOCAL to t0_local
t0_inport.add(fields=[bytearray(chr(101))], gate=2)
# everything else to t0_default
t0_inport.set_default_gate(0)

## t0_p2
# table=0 priority=50000 ip in_port=2 nw_dst=1.1.1.1 actions=LOCAL
t0_p2.add([{'priority' : 50000,
            'filter'   : 'ip and dst host 1.1.1.1',
            'gate'     : 1 }])
#table=0 priority=50000	arp in_port=2 arp_tpa=1.1.1.1 actions=LOCAL
t0_p2.add([{'priority' : 50000,
            'filter'   : 'arp and dst host 1.1.1.1',
            'gate'     : 1 }])
#table=0 priority=50000	udp in_port=2 tp_dst=4789 actions=LOCAL
t0_p2.add([{'priority' : 50000,
            'filter'   : 'udp and dst port 4789',
            'gate'     : 1 }])
# otherwise go to default table

## t0_lcl
#table=0 priority=50000	in_port=LOCAL actions=output:2
t0_lcl.add([{'priority' : 50000,
             'filter'   : 'arp and dst host 1.1.1.1',
             'gate'     : 1 }])
# otherwise go to default table

## t0_default
# table=0 priority=40000 udp tp_src=68 tp_dst=67 actions=CONTROLLER:65535
t0_default.add([{'priority' : 40000,
                 'filter'   : 'udp and src port 68 and dst port 67',
                 'gate'     : 1 }])
# table=0 priority=40000 dl_type=0x88cc	actions=CONTROLLER:65535
t0_default.add([{'priority' : 40000,
                 'filter'   : 'ether proto 0x88cc',
                 'gate'     : 1 }])
# table=0 priority=40000 dl_type=0x8942 actions=CONTROLLER:65535
t0_default.add([{'priority' : 40000,
                 'filter'   : 'ether proto 0x8942',
                 'gate'     : 1 }])
#table=0 priority=40000	arp actions=CONTROLLER:65535
t0_default.add([{'priority' : 40000,
                 'filter'   : 'arp',
                 'gate'     : 1 }])
# table=0 priority=0 actions=goto_table:1



#### TABLE 1 ####
### Create the modules
t1_inport::ExactMatch(fields=[{'offset':15, 'size':1}],
                      size=4096)
t1_in1::ExactMatch(fields=[{'offset':26, 'size':4}],
                    size=4096)
t1_in2::ExactMatch(fields=[{'offset':26, 'size':4}],
                    size=4096)
t1_in3::ExactMatch(fields=[{'offset':26, 'size':4}],
                    size=4096)
t1_in4::ExactMatch(fields=[{'offset':26, 'size':4}],
                    size=4096)


### Hook up the modules
to_tbl_1 -> t1_inport
t1_inport:1 -> t1_in1
t1_inport:2 -> t1_in2
t1_inport:3 -> t1_in3
t1_inport:4 -> t1_in4
t1_inport:0 -> Sink()

t1_in1:0 -> to_tbl_5
t1_in2:0 -> to_tbl_4
t1_in3:1 -> to_tbl_2
t1_in3:0 -> to_tbl_3
t1_in4:1 -> to_tbl_2
t1_in4:0 -> to_tbl_3


### Set module state
## t1_inport
t1_inport.add(fields=[bytearray(chr(1))], gate=1)
t1_inport.add(fields=[bytearray(chr(2))], gate=2)
t1_inport.add(fields=[bytearray(chr(3))], gate=3)
t1_inport.add(fields=[bytearray(chr(4))], gate=4)
t1_inport.set_default_gate(0)

## t1_in1
# table=1 priority=5000 in_port=1 actions=goto_table:5
t1_in1.set_default_gate(0)

## t1_in2
# table=1 priority=5000 in_port=2 actions=goto_table:4
t1_in2.set_default_gate(0)

## t1_in3
# table=1 priority=5000 ip in_port=3 nw_src=10.10.10.3 actions=goto_table:2
t1_in3.add(fields=[aton('10.10.10.3')], gate=1)
# table=1 priority=4000 in_port=3 actions=goto_table:3
t1_in3.set_default_gate(0)

## t1_in4
# table=1 priority=5000 ip in_port=4 nw_src=10.10.12.3 actions=goto_table:2
t1_in4.add(fields=[aton('10.10.12.3')], gate=1)
# table=1 priority=4000 in_port=4 actions=goto_table:3
t1_in4.set_default_gate(0)



#### TABLE 2 ####
### Create the modules
t2_A::ExactMatch(fields=[{'offset':26, 'size':4,'mask':0xFF000000},
                         {'offset':30, 'size':4}],
                 size=4096)

t2_B::ExactMatch(fields=[{'offset':26, 'size':4,'mask':0xFF000000},
                         {'offset':30, 'size':4,'mask':0xFF000000}],
                 size=4096)

t2_C::ExactMatch(fields=[{'offset':26, 'size':4,'mask':0xFF000000}],
                 size=4096)


### Hook up the modules
to_tbl_2 -> t2_A
t2_A:1 -> to_tbl_grp
t2_A:0 -> t2_B
t2_B:1 -> to_tbl_4
t2_B:0 -> t2_C
t2_C:1 -> Sink()
t2_C:0 -> to_out_2


### Set module state
## t2_A
# table=2 priority=50000 ip nw_src=10.10.10.0/24 nw_dst=10.10.12.1 actions=group:2953848289
t2_A.add(fields=[aton('10.10.10.0'),aton('10.10.12.1')], gate=1)
# otherwise match on stage B
t2_A.set_default_gate(0)

## t2_B
# table=2 priority=5000 ip nw_src=10.10.12.0/24 nw_dst=10.10.12.0/24 actions=goto_table:4
t2_B.add(fields=[aton('10.10.12.0'),aton('10.10.12.0')], gate=1)
# table=2 priority=5000 ip nw_src=10.10.12.0/24 nw_dst=10.10.10.0/24 actions=goto_table:4
t2_B.add(fields=[aton('10.10.12.0'),aton('10.10.10.0')], gate=1)
#table=2 priority=5000 ip nw_src=10.10.10.0/24 nw_dst=10.10.12.0/24 actions=goto_table:4
t2_B.add(fields=[aton('10.10.10.0'),aton('10.10.12.0')], gate=1)
# table=2 priority=5000 ip nw_src=10.10.10.0/24 nw_dst=10.10.10.0/24 actions=goto_table:4
t2_B.add(fields=[aton('10.10.10.0'),aton('10.10.10.0')], gate=1)
# otherwise match on stage C
t2_B.set_default_gate(0)

## t2_C
# table=2 priority=4000 ip nw_dst=10.10.10.0/24 actions=drop
t2_C.add(fields=[aton('10.10.10.0')], gate=1)
# table=2 priority=4000 ip nw_dst=10.10.12.0/24 actions=drop
t2_C.add(fields=[aton('10.10.12.0')], gate=1)
# table=2 priority=0 actions=output:2
t2_C.set_default_gate(0)



#### TABLE 3 ####
### Create the modules
t3::ExactMatch(fields=[{'offset':15, 'size':1}],
                 size=4096)


### Hook up the modules
to_tbl_3 -> t3
t3:1 -> to_tbl_grp
t3:0 -> Sink()


### Set module state
## t3
# table=3 priority=5000 in_port=3 actions=group:2953848289
t3.add(fields=[bytearray(chr(3))], gate=1)
# otherwise drop
t3.set_default_gate(0)



#### TABLE 4 ####
### Create the modules
### Hook up the modules
### Set module state

# table=4 priority=5000 ip nw_dst=10.10.12.3 actions=set_field:fa:16:3e:cf:f2:56->eth_dst output:4
# table=4 priority=5000 ip nw_dst=10.10.12.2 actions=set_field:fa:16:3e:f3:5e:82->eth_dst set_field:0x40c->tun_id set_field:1.1.1.2->tun_dst output:1
# table=4 priority=5000 ip nw_dst=10.10.10.2 actions=set_field:fa:16:3e:da:05:ed->eth_dst set_field:0x406->tun_id set_field:1.1.1.2->tun_dst output:1
# table=4 priority=5000 ip nw_dst=10.10.10.3 actions=set_field:fa:16:3e:3e:82:e8->eth_dst output:3



#### TABLE 5 ####
### Create the modules
### Hook up the modules
### Set module state

# table=5 priority=5000 tun_id=0x406 dl_dst=fa:16:3e:3e:82:e8 actions=output:3
# table=5 priority=5000 tun_id=0x40c dl_dst=fa:16:3e:cf:f2:56 actions=output:4



#### TABLE 6 ####
### Create the modules
t6::BPF()


### Hook up the modules
t6:1 -> to_ctl
t6:2 -> VLANPop() -> to_out_2
t6:0 -> Sink()

 
### Set module state
# table=6 priority=50000 arp dl_vlan=500 actions=CONTROLLER:65535
t6.add([{'priority' : 50000,
         'filter'   : 'vlan 500 and arp',
         'gate'     : 1 }])
# table=6 priority=5000 dl_vlan=500 actions=pop_vlan output:2
t6.add([{'priority' : 5000,
         'filter'   : 'vlan 500',
         'gate'     : 2 }])
# otherwise drop



#### GROUP TABLE ####
### Create the modules
### Hook up the modules
### Set module state

# group_id=2953848289 type=select bucket=actions= set_field:fa:16:3e:f3:5e:82->eth_dst
#                                                 set_field:1.1.1.2->tun_dst
#                                                 set_field:0x40c->tun_id
#                                                 output:1
#                                 bucket=actions= set_field:fa:16:3e:cf:f2:56->eth_dst
#                                                 output:4
