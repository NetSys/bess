// Copyright (c) 2016-2017, Nefeli Networks, Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
// list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation
// and/or other materials provided with the distribution.
//
// * Neither the names of the copyright holders nor the names of their
// contributors may be used to endorse or promote products derived from this
// software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

import "bess_msg.proto";

package bess.pb;

service BESSControl {

  //  -------------------------------------------------------------------------
  //  System
  //  -------------------------------------------------------------------------

  /// Query version of bessd
  rpc GetVersion (EmptyRequest) returns (VersionResponse) {}

  /// Reset the current packet processing datapath to the initial state.
  ///
  /// This command is identical to the following sequence:
  ///   ResetModules()
  ///   ResetPorts()
  ///   ResetTcs()
  ///   ResetWorkers()
  /// As it clears everything, BESS should appear as if the daemon has freshly
  /// started (if not, it is a bug; please report).
  ///
  /// NOTE: There should be no running worker to run this command.
  rpc ResetAll (EmptyRequest) returns (EmptyResponse) {}

  /// Terminate the BESS daemon.
  ///
  /// BESS daemon shuts off in a graceful manner. Note that this command is
  /// "asynchronous": this command doesn't block until the BESS daemon has
  /// shut off.
  ///
  /// NOTE: There should be no running worker to run this command.
  /// FIXME: rename (e.g., Terminate)
  rpc KillBess (EmptyRequest) returns (EmptyResponse) {}

  /// Import a plugin
  ///
  /// At the moment plugins can only contain module types,
  /// but might also support drivers/hooks/schedulers in the future.
  rpc ImportPlugin (ImportPluginRequest) returns (EmptyResponse) {}

  /// Unload a plugin
  ///
  /// At the moment plugins can only contain module types,
  /// but might also support drivers/hooks/schedulers in the future.
  rpc UnloadPlugin (UnloadPluginRequest) returns (EmptyResponse) {}

  /// List imported plugins
  ///
  /// At the moment plugins can only contain module types,
  /// but might also support drivers/hooks/schedulers in the future.
  rpc ListPlugins (EmptyRequest) returns (ListPluginsResponse) {}


  //  -------------------------------------------------------------------------
  //  Worker
  //  -------------------------------------------------------------------------

  /// Pause all running workers temporarily
  ///
  /// Some RPC commands to BESS or individual modules/ports require that
  /// threads must be inactive, to avoid race conditions.
  /// For such commands, use PauseALl at the beginning and ResumeAll at the end.
  ///  PauseAll()
  ///   SomeCommand1()
  ///   SomeCommand2()
  ///   ...
  ///  ResumeAll()
  /// Keep the duration as short as possible, to avoid packet drops.
  rpc PauseAll (EmptyRequest) returns (EmptyResponse) {}

  /// Pause the specified worker temporarily
  ///
  /// Some RPC commands to BESS or individual modules/ports require that
  /// threads must be inactive, to avoid race conditions.
  /// For such commands, use PauseWorker at the beginning and ResumeWorker at the end.
  ///  PauseWorker(0)
  ///   SomeCommand1()
  ///   SomeCommand2()
  ///   ...
  ///  ResumeWorker(0)
  /// Keep the duration as short as possible, to avoid packet drops.
  rpc PauseWorker (PauseWorkerRequest) returns (EmptyResponse) {}

  /// Resume the specified worker
  rpc ResumeWorker (ResumeWorkerRequest) returns (EmptyResponse) {}

  /// Resume all paused workers
  rpc ResumeAll (EmptyRequest) returns (EmptyResponse) {}

  /// Remove all existing workers
  ///
  /// NOTE: There should be no running worker to run this command.
  rpc ResetWorkers (EmptyRequest) returns (EmptyResponse) {}

  /// Enumerate all existing workers
  rpc ListWorkers (EmptyRequest) returns (ListWorkersResponse) {}

  /// Create a new worker
  ///
  /// NOTE: There should be no running worker to run this command.
  rpc AddWorker (AddWorkerRequest) returns (EmptyResponse) {}

  /// Remove a single worker
  ///
  /// NOTE: There should be no running worker to run this command.
  rpc DestroyWorker (DestroyWorkerRequest) returns (EmptyResponse) {}


  //  -------------------------------------------------------------------------
  //  Traffic classe & task
  //  -------------------------------------------------------------------------

  /// Remove all existing traffic classes
  ///
  /// NOTE: There should be no running worker to run this command.
  rpc ResetTcs (EmptyRequest) returns (EmptyResponse) {}

  /// Enumerate all existing workers
  rpc ListTcs (ListTcsRequest) returns (ListTcsResponse) {}

  /// Check scheduling contraints
  rpc CheckSchedulingConstraints (EmptyRequest) returns (CheckSchedulingConstraintsResponse) {}

  /// Create a new traffic class
  ///
  /// NOTE: There should be no running worker to run this command.
  rpc AddTc (AddTcRequest) returns (EmptyResponse) {}

  /// Update parameters of an existing traffic class
  ///
  /// NOTE: There should be no running worker to run this command.
  rpc UpdateTcParams (UpdateTcParamsRequest) returns (EmptyResponse) {}

  /// Change parent (and child arguments) of an existing traffic class
  ///
  /// NOTE: There should be no running worker to run this command.
  rpc UpdateTcParent (UpdateTcParentRequest) returns (EmptyResponse) {}

  /// Collect statistics of a traffic class
  rpc GetTcStats (GetTcStatsRequest) returns (GetTcStatsResponse) {}


  //  -------------------------------------------------------------------------
  //  Port
  //  -------------------------------------------------------------------------

  /// Enumerate all port drivers available
  rpc ListDrivers (EmptyRequest) returns (ListDriversResponse) {}

  /// Query detailed information of a port driver
  rpc GetDriverInfo(GetDriverInfoRequest) returns (GetDriverInfoResponse) {}

  /// Remove all initialized ports
  ///
  /// Will fail if there are modules that are still using ports.
  /// (e.g., PortInc, PortOut, QueueInc, QueueOut)
  ///
  /// NOTE: There should be no running worker to run this command.
  rpc ResetPorts (EmptyRequest) returns (EmptyResponse) {}

  /// Enumerate all initialized ports
  rpc ListPorts (EmptyRequest) returns (ListPortsResponse) {}

  /// Create a new port from the specified driver
  rpc CreatePort (CreatePortRequest) returns (CreatePortResponse) {}

  /// Remove a port
  ///
  /// The port should not be being used by a port-related module.
  /// (e.g., PortInc, PortOut, QueueInc, QueueOut)
  rpc DestroyPort (DestroyPortRequest) returns (EmptyResponse) {}

  /// Runtime-updatable configuration
  rpc SetPortConf (SetPortConfRequest) returns (EmptyResponse) {}
  rpc GetPortConf (GetPortConfRequest) returns (GetPortConfResponse) {}

  /// Collect port statistics
  ///
  /// At the moment, per-queue stats are not supported.
  rpc GetPortStats (GetPortStatsRequest) returns (GetPortStatsResponse) {}

  /// Query link status
  rpc GetLinkStatus (GetLinkStatusRequest) returns (GetLinkStatusResponse) {}

  // TODO: Add PortCommand, like ModuleCommand, which performs driver-specific
  //       actions on a port.


  //  -------------------------------------------------------------------------
  //  Module
  //  -------------------------------------------------------------------------

  /// Enumerate all module types available
  rpc ListMclass (EmptyRequest) returns (ListMclassResponse) {}

  /// Query detailed information of a module type
  rpc GetMclassInfo (GetMclassInfoRequest) returns (GetMclassInfoResponse) {}

  /// Remove all modules.
  ///
  /// This RPC will always succeed (unless there is a running worker)
  ///
  /// NOTE: There should be no running worker to run this command.
  rpc ResetModules (EmptyRequest) returns (EmptyResponse) {}

  /// Enumerate all initialized modules
  rpc ListModules (EmptyRequest) returns (ListModulesResponse) {}

  /// Create a new module instance from the given module type
  ///
  /// NOTE: There should be no running worker to run this command.
  rpc CreateModule (CreateModuleRequest) returns (CreateModuleResponse) {}

  /// Destroy an exsting module
  ///
  /// If the module is connected to other modules' input/output gate, they are
  /// disconnected first. All tasks created by the module will also be destoyed.
  ///
  /// NOTE: There should be no running worker to run this command.
  rpc DestroyModule (DestroyModuleRequest) returns (EmptyResponse) {}

  /// Fetch detailed information of an module instance
  rpc GetModuleInfo (GetModuleInfoRequest) returns (GetModuleInfoResponse) {}

  /// Connect two modules.
  ///
  /// Connect between m1's ogate and n2's igate (i.e., ackets sent to m1's ogate
  /// will be fed to m2's igate). The oate can be connected to only one igate,
  /// while the igate can be connected to multiple output gates.
  ///
  /// NOTE: There should be no running worker to run this command.
  rpc ConnectModules (ConnectModulesRequest) returns (EmptyResponse) {}

  /// Disconnect two modules.
  ///
  /// It removes a connection between two modules (you specify the previous one
  /// and its output gate). All packets coming out from the ogate will be
  /// dropped. Once disconnected, the ogate can be connected
  /// to any input gate.
  ///
  /// NOTE: There should be no running worker to run this command.
  rpc DisconnectModules (DisconnectModulesRequest) returns (EmptyResponse) {}

  /// Dump various stats about BESS's packet pools
  rpc DumpMempool (DumpMempoolRequest) returns (DumpMempoolResponse) {}

  /// Send a command to the specified module instance.
  ///
  /// Each module type defines a list of modyle-specific commands, which
  /// allow external programs to communicate with the module at runtime.
  /// See module_msg.proto for details.
  ///
  /// NOTE: Some commands cannot be used if there are running workers.
  ///       For those commands you must pause all workers first.
  rpc ModuleCommand (CommandRequest) returns (CommandResponse) {}

  //  -------------------------------------------------------------------------
  //  Gate hooks
  //  -------------------------------------------------------------------------

  /// Enable/Disable a gate hook.
  rpc ConfigureGateHook (ConfigureGateHookRequest) returns (CommandResponse) {}

  /// Enable/Disable a gate hook.
  rpc ListGateHooks (EmptyRequest) returns (ListGateHooksResponse) {}

  /// Send command to gate hook instance.
  rpc GateHookCommand (GateHookCommandRequest) returns (CommandResponse) {}

  //  -------------------------------------------------------------------------
  //  Resume hooks
  //  -------------------------------------------------------------------------

  /// Enable/Disable a resume hook.
  rpc ConfigureResumeHook (ConfigureResumeHookRequest) returns (CommandResponse) {}
}
