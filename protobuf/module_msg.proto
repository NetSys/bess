syntax = "proto3";

import "error.proto";

package bess.pb;

// Module-specific messages.
// The header generated from this file should not be included in the BESS core
// source code.

message ExactMatchCommandAddArg {
  uint64 gate = 1;
  repeated uint64 fields = 2;
}

message ExactMatchCommandDeleteArg {
  repeated uint64 fields = 2;
}

message ExactMatchCommandSetDefaultGateArg {
  uint64 gate = 1;
}

message HashLBCommandSetModeArg {
  enum Mode {
    L2 = 0;
    L3 = 1;
    L4 = 2;
  }
  Mode mode = 1;
}

message HashLBCommandSetGatesArg {
  repeated int64 gates = 1;
}

message IPLookupCommandAddArg {
  string prefix = 1;
  uint64 prefix_len = 2;
  uint64 gate = 3;
}

message L2ForwardCommandAddArg {
  message Entry {
    string addr = 1;
    int64 gate = 2;
  }
  repeated Entry entries = 1;
}

message L2ForwardCommandDeleteArg {
  repeated string addrs = 1;
}

message L2ForwardCommandSetDefaultGateArg {
  int64 gate = 1;
}

message L2ForwardCommandLookupArg {
  repeated string addrs = 1;
}

message L2ForwardCommandLookupResponse {
  Error error = 1;
  repeated uint64 gates = 2;
}

message L2ForwardCommandPopulateArg {
  string base = 1;
  int64 count = 2;
  int64 gate_count = 3;
}

message MeasureCommandGetSummaryResponse {
  Error error = 1;
  double timestamp = 2;
  uint64 packets = 3;
  uint64 bits = 4;
  uint64 total_latency_ns = 5;
}

message PortIncCommandSetBurstArg {
  int64 burst = 1;
}

message QueueIncCommandSetBurstArg {
  int64 burst = 1;
}

message QueueCommandSetBurstArg {
  int64 burst = 1;
}

message QueueCommandSetSizeArg {
  uint64 size = 1;
}

message WildcardMatchCommandAddArg {
  uint64 gate = 1;
  int64 priority = 2;
  repeated uint64 values = 3;
  repeated uint64 masks = 4;
}

message WildcardMatchCommandDeleteArg {
  repeated uint64 values = 1;
  repeated uint64 masks = 2;
}

message WildcardMatchCommandClearArg {
}

message WildcardMatchCommandSetDefaultGateArg {
  uint64 gate = 1;
}

message BPFArg {
  message Filter {
    int64 priority = 1;
    string filter = 2;
    int64 gate = 3;
  }
  repeated Filter filters = 1;
}

message DumpArg {
  double interval = 1;
}

message EtherEncapArg {
}

message ExactMatchArg {
  message Field {
    uint64 size = 1;
    uint64 mask = 4;
    oneof position {
      string name = 2;
      int64 offset = 3;
    }
  }
  repeated Field fields = 1;
}

message FlowGenArg {
  bytes template = 1;
  double pps = 2;
  double flow_rate = 3;
  double flow_duration = 4;
  enum Dist {
    UNIFORM = 0;
    EXPONENTIAL = 1;
    PARETO = 2;
  }
  Dist arrival = 5;
  Dist duration = 6;
  bool quick_rampup = 7;
}

message GenericDecapArg {
  uint64 bytes = 1;
}

message GenericEncapArg {
  message Field {
    uint64 size = 1;
    oneof attribute {
      string name = 2;
      uint64 value = 3;
    }
  }
  repeated Field fields = 1;
}

message HashLBArg {
  HashLBCommandSetGatesArg gate_arg = 1;
  HashLBCommandSetModeArg mode_arg = 2;
}

message L2ForwardArg {
  int64 size = 1;
  int64 bucket = 2;
}

message MeasureArg {
  int64 warmup = 1;
}

message MetadataTestArg {
  map<string, int64> read = 1;
  map<string, int64> write = 2;
  map<string, int64> update = 3;
}

message PortIncArg {
  string port = 1;
  int64 burst = 2;
  bool prefetch = 3;
}

message PortOutArg {
  string port = 1;
}

message QueueIncArg {
  string port = 1;
  uint64 qid = 2;
  int64 burst = 3;
  bool prefetch = 4;
}

message QueueOutArg {
  string port = 1;
  uint64 qid = 2;
}

message QueueArg {
  uint64 size = 1;
  int64 burst = 2;
  bool prefetch = 3;
}

message RandomUpdateArg {
  message Field {
    int64 offset = 1;
    uint64 size = 2;
    uint64 min = 3;
    uint64 max = 4;
  }
  repeated Field fields = 1;
}

message RewriteArg {
  repeated bytes templates = 1;
}

message RoundRobinCommandSetGatesArg {
  repeated int64 gates = 1;
}

message RoundRobinCommandSetModeArg {
  enum Mode {
    PACKET = 0;
    BATCH = 1;
  }
  Mode mode = 1;
}

message RoundRobinArg {
  RoundRobinCommandSetGatesArg gate_arg = 1;
  RoundRobinCommandSetModeArg mode_arg = 2;
}

message SetMetadataArg {
  message Attribute {
    string name = 1;
    uint64 size = 2;
    bytes value = 3;
    int64 offset = 4;
  }
  repeated Attribute attrs = 1;
}

message SourceCommandSetBurstArg {
  uint64 burst = 1;
}

message SourceCommandSetPktSizeArg {
  uint64 pkt_size = 1;
}

message SourceArg {
  SourceCommandSetBurstArg burst_arg = 1;
  SourceCommandSetPktSizeArg pkt_size_arg = 2;
}

message SplitArg {
  uint64 size = 1;
  string name = 2;
  int64 offset = 3;
}

message UpdateArg {
  message Field {
    int64 offset = 1;
    uint64 size = 2;
    bytes value = 3;
  }
  repeated Field fields = 1;
}

message VLANPushArg {
  uint64 tci = 1;
}

message VXLANEncapArg {
  uint64 dstport = 1;
}

message WildcardMatchArg {
  message Field {
    uint64 size = 1;
    oneof length {
      uint64 offset = 2;
      string attribute = 3;
    }
  }
  repeated Field fields = 1;
}
